{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","locations","currentIndex","isLoading","_this2","setState","fetch","then","response","json","startTimer","catch","_this3","length","setTimeout","currentLocation","react_default","a","createElement","formatTimestamp","t","getMap","convertE7Coordinates","l","timestamp","Intl","DateTimeFormat","year","month","day","hour","minute","format","position","Math","pow","Map","center","zoom","style","width","margin","height","TileLayer","attribution","url","Marker","Popup","className","concat","getCurrentView","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAsGeA,uCA3Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,GACXC,aAAc,EACdC,WAAW,GALIV,mFASC,IAAAW,EAAAR,KAClBA,KAAKS,SAAS,CAAEF,WAAW,IAC3BG,MAdqB,oBAelBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACN,GACLG,EAAKC,SAAS,CACZJ,YACAE,WAAW,IAEbC,EAAKM,eAGNC,MAAM,kBAAMP,EAAKC,SAAS,CAAEF,WAAW,2CAG/B,IACPH,EADOY,EAAAhB,KAKTI,EADEJ,KAAKI,MAAME,cAAgB,EACrB,CAAEA,aAAcN,KAAKI,MAAMC,UAAUY,OAAQ,GAE7C,CAAEX,aAAcN,KAAKI,MAAME,aAJvB,IAOdN,KAAKS,SAASL,GACdc,WAAW,kBAAMF,EAAKF,cATT,8CAYb,IAAMT,EAAYL,KAAKI,MAAMC,UAC7B,GAAIA,EAAUY,OAAS,EAAG,CAExB,IAAME,EAAkBd,EAAUL,KAAKI,MAAME,cAE7C,OACEc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAAMtB,KAAKuB,gBAAgBJ,EAAgBK,IAC3CJ,EAAAC,EAAAC,cAAA,WAAMtB,KAAKyB,OAAOzB,KAAK0B,qBAAqBP,EAAgBQ,+CAKpDC,GACd,OAAO,IAAIC,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YACPC,OAAOR,gDAESS,GACnB,MAAO,CAACA,EAAS,GAATC,KAAAC,IAAc,GAAM,GAAGF,EAAS,GAATC,KAAAC,IAAc,GAAM,mCAE9CF,GAGL,OACEjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAKC,OAAQJ,EAAUK,KAFZ,GAEwBC,MAHpB,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,UAItD1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQb,SAAUA,GAChBjB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,6BACuB/B,EAAAC,EAAAC,cAAA,WADvB,4DAQN,OAAQF,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACpBpD,KAAKI,MAAMG,UAAY,aAAvB,GAAA8C,OAAyCrD,KAAKI,MAAMC,UAAUY,OAA9D,eACDG,EAAAC,EAAAC,cAAA,WACGtB,KAAKsD,eAAetD,KAAKI,MAAMC,oBAtFtBkD,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.85c44ccc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\n\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css';\nimport 'leaflet-defaulticon-compatibility';\n\nconst locationsDataUrl = './locations.json';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: [],\n      currentIndex: 0,\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    fetch(locationsDataUrl)\n      .then(response => response.json())\n      .then((locations) => {\n        this.setState({\n          locations,\n          isLoading: false\n        });\n        this.startTimer();\n      }\n      )\n      .catch(() => this.setState({ isLoading: false }));\n  }\n\n  startTimer() {\n    let state;\n    const time = 100;\n    const speed = 30;\n    if (this.state.currentIndex <= 0) {\n      state = { currentIndex: this.state.locations.length -1 };\n    } else {\n      state = { currentIndex: this.state.currentIndex - speed };\n    }\n\n    this.setState(state);\n    setTimeout(() => this.startTimer(), time);\n  }\n  getCurrentView() {\n    const locations = this.state.locations;\n    if (locations.length > 0) {\n\n      const currentLocation = locations[this.state.currentIndex];\n\n      return (\n        <div>\n          <div>{this.formatTimestamp(currentLocation.t)}</div>\n          <div>{this.getMap(this.convertE7Coordinates(currentLocation.l))}</div>\n        </div>\n      );\n    }\n  }\n  formatTimestamp(timestamp) {\n    return new Intl.DateTimeFormat('en-GB', {\n      year: 'numeric',\n      month: 'long',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(timestamp)\n  }\n  convertE7Coordinates(position) {\n    return [position[1] / 10 ** 7, position[0] / 10 ** 7];\n  }\n  getMap(position) {\n    const mapStyle = { width: '100%', margin: 'auto', height: '600px' };\n    const zoom = 12;\n    return (\n      <Map center={position} zoom={zoom} style={mapStyle}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n          <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup>\n        </Marker>\n      </Map>\n    );\n  }\n  render() {\n    return (<div className=\"App\">\n      {this.state.isLoading ? 'Loading...' : `${this.state.locations.length} locations.`}\n      <div>\n        {this.getCurrentView(this.state.locations)}\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}